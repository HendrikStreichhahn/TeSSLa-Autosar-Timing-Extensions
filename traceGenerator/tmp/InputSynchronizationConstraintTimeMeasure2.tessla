include "../../main/t2uInputSynchronizationConstraint.tessla"
in response: Events[Int]
in endOfStreams: Events[Int]
in stimulus1: Events[Int]
in stimulus2: Events[Int]
in stimulus3: Events[Int]
in stimulus4: Events[Int]
in stimulus5: Events[Int]
in stimulus6: Events[Int]
in stimulus7: Events[Int]
in stimulus8: Events[Int]
in stimulus9: Events[Int]
in stimulus10: Events[Int]
in stimulus11: Events[Int]
in stimulus12: Events[Int]
in stimulus13: Events[Int]
in stimulus14: Events[Int]
in stimulus15: Events[Int]
in stimulus16: Events[Int]
in stimulus17: Events[Int]
in stimulus18: Events[Int]
in stimulus19: Events[Int]
in stimulus20: Events[Int]
in stimulus21: Events[Int]
in stimulus22: Events[Int]
in stimulus23: Events[Int]
in stimulus24: Events[Int]
in stimulus25: Events[Int]
in stimulus26: Events[Int]
in stimulus27: Events[Int]
in stimulus28: Events[Int]
in stimulus29: Events[Int]
in stimulus30: Events[Int]
in stimulus31: Events[Int]
in stimulus32: Events[Int]
in stimulus33: Events[Int]
in stimulus34: Events[Int]
in stimulus35: Events[Int]
in stimulus36: Events[Int]
in stimulus37: Events[Int]
in stimulus38: Events[Int]
in stimulus39: Events[Int]
in stimulus40: Events[Int]
in stimulus41: Events[Int]
in stimulus42: Events[Int]
in stimulus43: Events[Int]
in stimulus44: Events[Int]
in stimulus45: Events[Int]
in stimulus46: Events[Int]
in stimulus47: Events[Int]
in stimulus48: Events[Int]
in stimulus49: Events[Int]
in stimulus50: Events[Int]
in stimulus51: Events[Int]
in stimulus52: Events[Int]
in stimulus53: Events[Int]
in stimulus54: Events[Int]
in stimulus55: Events[Int]
in stimulus56: Events[Int]
in stimulus57: Events[Int]
in stimulus58: Events[Int]
in stimulus59: Events[Int]
in stimulus60: Events[Int]
in stimulus61: Events[Int]
in stimulus62: Events[Int]
in stimulus63: Events[Int]
in stimulus64: Events[Int]
in stimulus65: Events[Int]
in stimulus66: Events[Int]
in stimulus67: Events[Int]
in stimulus68: Events[Int]
in stimulus69: Events[Int]
in stimulus70: Events[Int]
in stimulus71: Events[Int]
in stimulus72: Events[Int]
in stimulus73: Events[Int]
in stimulus74: Events[Int]
in stimulus75: Events[Int]
in stimulus76: Events[Int]
in stimulus77: Events[Int]
in stimulus78: Events[Int]
in stimulus79: Events[Int]
in stimulus80: Events[Int]
in stimulus81: Events[Int]
in stimulus82: Events[Int]
in stimulus83: Events[Int]
in stimulus84: Events[Int]
in stimulus85: Events[Int]
in stimulus86: Events[Int]
in stimulus87: Events[Int]
in stimulus88: Events[Int]
in stimulus89: Events[Int]
in stimulus90: Events[Int]
in stimulus91: Events[Int]
in stimulus92: Events[Int]
in stimulus93: Events[Int]
in stimulus94: Events[Int]
in stimulus95: Events[Int]
in stimulus96: Events[Int]
in stimulus97: Events[Int]
in stimulus98: Events[Int]
in stimulus99: Events[Int]
in stimulus100: Events[Int]
in stimulus101: Events[Int]
in stimulus102: Events[Int]
def timeNow = merge(time(stimulus102),merge(time(stimulus101),merge(time(stimulus100),merge(time(stimulus99),merge(time(stimulus98),merge(time(stimulus97),merge(time(stimulus96),merge(time(stimulus95),merge(time(stimulus94),merge(time(stimulus93),merge(time(stimulus92),merge(time(stimulus91),merge(time(stimulus90),merge(time(stimulus89),merge(time(stimulus88),merge(time(stimulus87),merge(time(stimulus86),merge(time(stimulus85),merge(time(stimulus84),merge(time(stimulus83),merge(time(stimulus82),merge(time(stimulus81),merge(time(stimulus80),merge(time(stimulus79),merge(time(stimulus78),merge(time(stimulus77),merge(time(stimulus76),merge(time(stimulus75),merge(time(stimulus74),merge(time(stimulus73),merge(time(stimulus72),merge(time(stimulus71),merge(time(stimulus70),merge(time(stimulus69),merge(time(stimulus68),merge(time(stimulus67),merge(time(stimulus66),merge(time(stimulus65),merge(time(stimulus64),merge(time(stimulus63),merge(time(stimulus62),merge(time(stimulus61),merge(time(stimulus60),merge(time(stimulus59),merge(time(stimulus58),merge(time(stimulus57),merge(time(stimulus56),merge(time(stimulus55),merge(time(stimulus54),merge(time(stimulus53),merge(time(stimulus52),merge(time(stimulus51),merge(time(stimulus50),merge(time(stimulus49),merge(time(stimulus48),merge(time(stimulus47),merge(time(stimulus46),merge(time(stimulus45),merge(time(stimulus44),merge(time(stimulus43),merge(time(stimulus42),merge(time(stimulus41),merge(time(stimulus40),merge(time(stimulus39),merge(time(stimulus38),merge(time(stimulus37),merge(time(stimulus36),merge(time(stimulus35),merge(time(stimulus34),merge(time(stimulus33),merge(time(stimulus32),merge(time(stimulus31),merge(time(stimulus30),merge(time(stimulus29),merge(time(stimulus28),merge(time(stimulus27),merge(time(stimulus26),merge(time(stimulus25),merge(time(stimulus24),merge(time(stimulus23),merge(time(stimulus22),merge(time(stimulus21),merge(time(stimulus20),merge(time(stimulus19),merge(time(stimulus18),merge(time(stimulus17),merge(time(stimulus16),merge(time(stimulus15),merge(time(stimulus14),merge(time(stimulus13),merge(time(stimulus12),merge(time(stimulus11),merge(time(stimulus10),merge(time(stimulus9),merge(time(stimulus8),merge(time(stimulus7),merge(time(stimulus6),merge(time(stimulus5),merge(time(stimulus4),merge(time(stimulus3),merge(time(stimulus2),merge(time(stimulus1),time(response)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
def eventsNow = Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(Map_attachIntIntLifted(if (defaultTime(stimulus1) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 1, stimulus1), Map.empty[Int, Int]) else Map.empty[Int, Int],if (defaultTime(stimulus2) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 2, stimulus2), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus3) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 3, stimulus3), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus4) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 4, stimulus4), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus5) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 5, stimulus5), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus6) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 6, stimulus6), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus7) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 7, stimulus7), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus8) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 8, stimulus8), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus9) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 9, stimulus9), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus10) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 10, stimulus10), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus11) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 11, stimulus11), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus12) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 12, stimulus12), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus13) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 13, stimulus13), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus14) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 14, stimulus14), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus15) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 15, stimulus15), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus16) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 16, stimulus16), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus17) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 17, stimulus17), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus18) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 18, stimulus18), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus19) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 19, stimulus19), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus20) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 20, stimulus20), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus21) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 21, stimulus21), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus22) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 22, stimulus22), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus23) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 23, stimulus23), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus24) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 24, stimulus24), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus25) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 25, stimulus25), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus26) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 26, stimulus26), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus27) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 27, stimulus27), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus28) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 28, stimulus28), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus29) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 29, stimulus29), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus30) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 30, stimulus30), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus31) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 31, stimulus31), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus32) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 32, stimulus32), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus33) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 33, stimulus33), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus34) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 34, stimulus34), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus35) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 35, stimulus35), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus36) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 36, stimulus36), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus37) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 37, stimulus37), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus38) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 38, stimulus38), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus39) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 39, stimulus39), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus40) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 40, stimulus40), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus41) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 41, stimulus41), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus42) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 42, stimulus42), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus43) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 43, stimulus43), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus44) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 44, stimulus44), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus45) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 45, stimulus45), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus46) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 46, stimulus46), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus47) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 47, stimulus47), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus48) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 48, stimulus48), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus49) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 49, stimulus49), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus50) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 50, stimulus50), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus51) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 51, stimulus51), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus52) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 52, stimulus52), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus53) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 53, stimulus53), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus54) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 54, stimulus54), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus55) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 55, stimulus55), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus56) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 56, stimulus56), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus57) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 57, stimulus57), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus58) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 58, stimulus58), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus59) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 59, stimulus59), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus60) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 60, stimulus60), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus61) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 61, stimulus61), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus62) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 62, stimulus62), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus63) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 63, stimulus63), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus64) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 64, stimulus64), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus65) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 65, stimulus65), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus66) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 66, stimulus66), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus67) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 67, stimulus67), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus68) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 68, stimulus68), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus69) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 69, stimulus69), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus70) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 70, stimulus70), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus71) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 71, stimulus71), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus72) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 72, stimulus72), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus73) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 73, stimulus73), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus74) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 74, stimulus74), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus75) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 75, stimulus75), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus76) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 76, stimulus76), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus77) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 77, stimulus77), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus78) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 78, stimulus78), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus79) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 79, stimulus79), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus80) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 80, stimulus80), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus81) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 81, stimulus81), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus82) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 82, stimulus82), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus83) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 83, stimulus83), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus84) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 84, stimulus84), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus85) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 85, stimulus85), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus86) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 86, stimulus86), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus87) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 87, stimulus87), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus88) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 88, stimulus88), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus89) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 89, stimulus89), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus90) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 90, stimulus90), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus91) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 91, stimulus91), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus92) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 92, stimulus92), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus93) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 93, stimulus93), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus94) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 94, stimulus94), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus95) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 95, stimulus95), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus96) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 96, stimulus96), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus97) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 97, stimulus97), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus98) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 98, stimulus98), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus99) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 99, stimulus99), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus100) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 100, stimulus100), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus101) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 101, stimulus101), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(stimulus102) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 102, stimulus102), Map.empty[Int, Int]) else Map.empty[Int, Int]),if (defaultTime(response) >= timeNow) then merge(Map.add(Map.empty[Int, Int], 0, response), Map.empty[Int, Int]) else Map.empty[Int, Int])
def constraint :=  inputSynchronizationConstraint(eventsNow, 102 ,25)
out constraint