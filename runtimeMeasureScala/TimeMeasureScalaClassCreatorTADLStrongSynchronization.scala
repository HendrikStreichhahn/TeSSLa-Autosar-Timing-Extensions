import java.io.FileWriter
import java.io.IOException

class TimeMeasureScalaClassCreatorTADLStrongSynchronization extends TimeMeasureScalaClassCreatorTADLSynchronization{

	def generateEntireObject(scalaFilePath: String, scalaObjectName: String, resultFilePath: String, repetitionCount: Int,
			eventCount: Int, tolerance: Int, streamCount: Int, minClusterDistance: Int,
			maxClusterDistance: Int,  printInputEvents: Boolean): Boolean= {
		var constraintCreator = new TimeMeasureScalaClassCreatorTADLStrongSynchronization
		try {
			var fileWriter = new FileWriter(scalaFilePath)
			fileWriter.write("//AUTOGENERATED FILE! CHANGES WILL BE OVERWRITTEN\n")
			fileWriter.write("import java.io._\n")
			fileWriter.write("object " + scalaObjectName + "{\n")
			fileWriter.write("\n");
			constraintCreator.generateMainMethod(fileWriter, 1, repetitionCount, resultFilePath)
			fileWriter.write("\n");
			constraintCreator.generateMemberVariableListGeneral(fileWriter, 1, eventCount)
			fileWriter.write("\n");
			constraintCreator.generateMemberVariableListExtended(fileWriter, 1, tolerance, streamCount,
				minClusterDistance, maxClusterDistance)
			fileWriter.write("\n");
			constraintCreator.generateMeasureConstraint(fileWriter, 1, printInputEvents, streamCount)
			fileWriter.write("\n");
			constraintCreator.generateMeasureMultiple(fileWriter, 1)
			fileWriter.write("\n");
			constraintCreator.generateStoreResultsToFile(fileWriter, 1)
			fileWriter.write("\n");
			constraintCreator.generateAverage(fileWriter, 1)
			fileWriter.write("\n");
			constraintCreator.generateOutputFuncValue(fileWriter, 1, printInputEvents)
			fileWriter.write("\n");
			constraintCreator.generateOutputFuncFinal(fileWriter, 1, printInputEvents)
			fileWriter.write("\n");
			constraintCreator.generateGenerateTrace(fileWriter, 1, repetitionCount, resultFilePath)
			fileWriter.write("}\n")
			fileWriter.flush()
			fileWriter.close()
		} catch {
			case e: IOException => return false
		}
		return true
	}

	protected def generateMemberVariableListExtended(writer: FileWriter, prevTabCount: Int, tolerance: Int, streamCount: Int,
			minClusterDistance: Int, maxClusterDistance: Int) : Unit = {
		writer.write(tabs(prevTabCount) + "var tolerance: Int = " + tolerance + "\n")
		writer.write(tabs(prevTabCount) + "var streamCount : Int = " + streamCount + "\n")
		writer.write(tabs(prevTabCount) + "var minClusterDistance : Int = " + minClusterDistance + "\n")
		writer.write(tabs(prevTabCount) + "var maxClusterDistance : Int = " + maxClusterDistance + "\n")
		writer.write(tabs(prevTabCount) + "var traceSet : SynchronizationConstraintGenerator = null" + "\n")
	}
	
	override protected def generateGenerateTrace(writer: FileWriter, prevTabCount: Int, repetitionCount: Int, resultFilePath: String) : Unit = {
		writer.write(tabs(prevTabCount) + "def generateTrace(): Boolean = {" + "\n")
		writer.write(tabs(prevTabCount+1) + "tesslaMonitorInstance = new TesslaMonitor()" + "\n")
		writer.write(tabs(prevTabCount+1) + "traceSet = new SynchronizationConstraintGenerator(streamCount)" + "\n")
		writer.write(tabs(prevTabCount+1) + "var res: Boolean = traceSet.generateTestTrace(eventCount,  tolerance, 1," +
			"minClusterDistance, maxClusterDistance)" + "\n")
		writer.write(tabs(prevTabCount+1) + "if (res) {" + "\n")
		writer.write(tabs(prevTabCount+2) + "traceSet.initOutput();" + "\n")
		writer.write(tabs(prevTabCount+1) + "}" + "\n")
		writer.write(tabs(prevTabCount+1) + "res" + "\n")
		writer.write(tabs(prevTabCount) + "}" + "\n")
	}
	
	/*protected def generateMeasureConstraintWriteEvents(writer: FileWriter, prevTabCount: Int) : Unit = {
		writer.write(tabs(prevTabCount) + "for (i <- 0 to currentEvents.length-1){" + "\n")
		for (i <- 0 to streamCount){
			writer.write(tabs(prevTabCount+1) + "if (currentEvents(i).getOwnerStream().getName().equals(\"event" + i + "\" ))" + "\n")
			writer.write(tabs(prevTabCount+2) + "tesslaMonitorInstance.set_var_event" + i + "(currentEvents(i).getColor(), currentEvents(i).getTimeStamp())" + "\n")
		}
		//writer.write(tabs(prevTabCount+1) + "if (currentEvents(i).getOwnerStream().getName().equals(\"event\" ))" + "\n")
		//writer.write(tabs(prevTabCount+2) + "tesslaMonitorInstance.set_var_event(currentEvents(i).getColor(), currentEvents(i).getTimeStamp())" + "\n")
		//writer.write(tabs(prevTabCount+1) + "eventCounter = eventCounter+1" + "\n")
		writer.write(tabs(prevTabCount) + "}" + "\n")
	}*/
}