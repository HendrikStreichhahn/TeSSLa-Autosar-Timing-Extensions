import java.io.FileWriter
import java.io.IOException

class TimeMeasureScalaClassCreatorARExecutionOrderConstraintHierarchical extends TimeMeasureScalaClassCreator{

	def generateEntireObject(scalaFilePath: String, scalaObjectName: String, resultFilePath: String,
			repetitionCount: Int, height: Int, width: Int, eventDistance: Int, printInputEvents: Boolean): Boolean= {
		var execOrderCreator = new TimeMeasureScalaClassCreatorARExecutionOrderConstraintHierarchical
		try {
			var fileWriter = new FileWriter(scalaFilePath)
			fileWriter.write("//AUTOGENERATED FILE! CHANGES WILL BE OVERWRITTEN\n")
			fileWriter.write("import java.io._\n")
			fileWriter.write("object " + scalaObjectName + "{\n")
			fileWriter.write("\n")
			execOrderCreator.generateMainMethod(fileWriter, 1, repetitionCount, resultFilePath)
			fileWriter.write("\n")
			execOrderCreator.generateMemberVariableListGeneral(fileWriter, 1, 1000)
			fileWriter.write("\n")
			execOrderCreator.generateMemberVariableListExtended(fileWriter, 1, height, width, eventDistance)
			fileWriter.write("\n")
			execOrderCreator.generateMeasureConstraint(fileWriter, 1, printInputEvents)
			fileWriter.write("\n")
			execOrderCreator.generateMeasureMultiple(fileWriter, 1)
			fileWriter.write("\n")
			execOrderCreator.generateStoreResultsToFile(fileWriter, 1)
			fileWriter.write("\n")
			execOrderCreator.generateAverage(fileWriter, 1)
			fileWriter.write("\n")
			execOrderCreator.generateOutputFuncValue(fileWriter, 1, printInputEvents)
			fileWriter.write("\n")
			execOrderCreator.generateOutputFuncFinal(fileWriter, 1, printInputEvents)
			fileWriter.write("\n")
			execOrderCreator.generateGenerateTrace(fileWriter, 1, repetitionCount, resultFilePath)
			fileWriter.write("}\n")
			fileWriter.flush()
			fileWriter.close()
		} catch {
			case e: IOException => return false
		}
		return true
	}

	protected def generateMemberVariableListExtended(writer: FileWriter, prevTabCount: Int, height: Int, width: Int,
			eventDistance: Int) : Unit = {
		writer.write(tabs(prevTabCount) + "var height: Int = " + height + "\n")
		writer.write(tabs(prevTabCount) + "var width: Int = " + width + "\n")
		writer.write(tabs(prevTabCount) + "var eventDistance: Int = " + eventDistance + "\n")
		writer.write(tabs(prevTabCount) + "var traceSet : ExecutionOrderConstraintGenerator = null" + "\n")
	}
	
	protected def generateGenerateTrace(writer: FileWriter, prevTabCount: Int, repetitionCount: Int, resultFilePath: String) : Unit = {
		writer.write(tabs(prevTabCount) + "def generateTrace(): Boolean = {" + "\n")
		writer.write(tabs(prevTabCount+1) + "tesslaMonitorInstance = new TesslaMonitor()" + "\n")
		writer.write(tabs(prevTabCount+1) + "traceSet = new ExecutionOrderConstraintGenerator()" + "\n")
		// generateTestTrace(int eventCount, int eventDistance, int hierarchDepth, int hierarchWidth)
		writer.write(tabs(prevTabCount+1) + "var ctr: Int = 0" + "\n");
		writer.write(tabs(prevTabCount+1) + "for (i <- 0 to height)" + "\n");
		writer.write(tabs(prevTabCount+2) + "ctr = ctr + ((Math.pow(width, i)).toInt)" + "\n");

		writer.write(tabs(prevTabCount+1) + "var res: Boolean = traceSet.generateTestTrace(ctr, eventDistance)" + "\n")
		writer.write(tabs(prevTabCount+1) + "if (res) {" + "\n")
		writer.write(tabs(prevTabCount+2) + "traceSet.initOutput();" + "\n")
		writer.write(tabs(prevTabCount+1) + "}" + "\n")
		writer.write(tabs(prevTabCount+1) + "res" + "\n")
		writer.write(tabs(prevTabCount) + "}" + "\n")
	}
	
	protected def generateMeasureConstraintWriteEvents(writer: FileWriter, prevTabCount: Int) : Unit = {
		writer.write(tabs(prevTabCount) + "for (i <- 0 to currentEvents.length-1){" + "\n")
		writer.write(tabs(prevTabCount+1) + "if (currentEvents(i).getOwnerStream().getName().equals(\"event\"))" + "\n")
		writer.write(tabs(prevTabCount+2) + "tesslaMonitorInstance.set_var_event(currentEvents(i).getColor(), currentEvents(i).getTimeStamp())" + "\n")
		writer.write(tabs(prevTabCount) + "}" + "\n")
	}
	

}